<style lang="scss">

</style>

<script>
    import wepy from 'wepy'
    import 'wepy-async-function'
    import getExtJson from './mixins/getExtJson'


    export default class extends wepy.app {
        config = {
            pages: [
                'pages/index',
                'pages/goods',
                'pages/me',
                'pages/order',
                'pages/shopDetails',
                'pages/remarks',
                'pages/collection',
                'pages/mytracks',
                'pages/search',
                'pages/memberInfo',
                'pages/paySuccess',
                'pages/orderInfo',
                'pages/webView'
            ],
            window: {
                backgroundTextStyle: 'light',
                navigationBarBackgroundColor: '#fff',
                navigationBarTitleText: 'WeChat',
                navigationBarTextStyle: 'black'
            }
        }

        globalData = {
            userInfo: null,
            tableId: '',
            delivery_price: 5,
            phone: '',
            tabname: '',
            bezier(points, times){
// 0、以3个控制点为例，点A,B,C,AB上设置点D,BC上设置点E,DE连线上设置点F,则最终的贝塞尔曲线是点F的坐标轨迹。
// 1、计算相邻控制点间距。
// 2、根据完成时间,计算每次执行时D在AB方向上移动的距离，E在BC方向上移动的距离。
// 3、时间每递增100ms，则D,E在指定方向上发生位移, F在DE上的位移则可通过AD/AB = DF/DE得出。
// 4、根据DE的正余弦值和DE的值计算出F的坐标。
// 邻控制AB点间距
                var bezier_points = [];
                var points_D = [];
                var points_E = [];
                const DIST_AB = Math.sqrt(Math.pow(points[1]['x'] - points[0]['x'], 2) + Math.pow(points[1]['y'] - points[0]['y'], 2));
// 邻控制BC点间距
                const DIST_BC = Math.sqrt(Math.pow(points[2]['x'] - points[1]['x'], 2) + Math.pow(points[2]['y'] - points[1]['y'], 2));
// D每次在AB方向上移动的距离
                const EACH_MOVE_AD = DIST_AB / times;
// E每次在BC方向上移动的距离
                const EACH_MOVE_BE = DIST_BC / times;
// 点AB的正切
                const TAN_AB = (points[1]['y'] - points[0]['y']) / (points[1]['x'] - points[0]['x']);
// 点BC的正切
                const TAN_BC = (points[2]['y'] - points[1]['y']) / (points[2]['x'] - points[1]['x']);
// 点AB的弧度值
                const RADIUS_AB = Math.atan(TAN_AB);
// 点BC的弧度值
                const RADIUS_BC = Math.atan(TAN_BC);
// 每次执行
                for (var i = 1; i <= times; i++) {
// AD的距离
                    var dist_AD = EACH_MOVE_AD * i;
// BE的距离
                    var dist_BE = EACH_MOVE_BE * i;
// D点的坐标
                    var point_D = {};
                    point_D['x'] = dist_AD * Math.cos(RADIUS_AB) + points[0]['x'];
                    point_D['y'] = dist_AD * Math.sin(RADIUS_AB) + points[0]['y'];
                    points_D.push(point_D);
// E点的坐标
                    var point_E = {};
                    point_E['x'] = dist_BE * Math.cos(RADIUS_BC) + points[1]['x'];
                    point_E['y'] = dist_BE * Math.sin(RADIUS_BC) + points[1]['y'];
                    points_E.push(point_E);
// 此时线段DE的正切值
                    var tan_DE = (point_E['y'] - point_D['y']) / (point_E['x'] - point_D['x']);
// tan_DE的弧度值
                    var radius_DE = Math.atan(tan_DE);
// 地市DE的间距
                    var dist_DE = Math.sqrt(Math.pow((point_E['x'] - point_D['x']), 2) + Math.pow((point_E['y'] - point_D['y']), 2));
// 此时DF的距离
                    var dist_DF = (dist_AD / DIST_AB) * dist_DE;
// 此时DF点的坐标
                    var point_F = {};
                    point_F['x'] = dist_DF * Math.cos(radius_DE) + point_D['x'];
                    point_F['y'] = dist_DF * Math.sin(radius_DE) + point_D['y'];
                    bezier_points.push(point_F);
                }
                return {
                    'bezier_points': bezier_points
                };
            }
        }

        constructor() {
            super()
            this.use('requestfix')
        }

        onLaunch() {
            this.testAsync()
            getExtJson.call(this)
            //            调用API从本地缓存中获取数据
            wx.getSystemInfo({//  获取页面的有关信息
                success:(res) => {
                    wx.setStorageSync('systemInfo', res)
                    var ww = res.windowWidth;
                    var hh = res.windowHeight;
                    this.globalData.ww = ww;
                    this.globalData.hh = hh;
                }
            });
        }

        sleep(s) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('promise resolved')
                }, s * 1000)
            })
        }

        async testAsync() {
            const data = await this.sleep(3)
            console.log(data)
        }

        getUserInfo(cb) { //获取用户信息 头像、昵称等
            if (this.globalData.userInfo) {
                return this.globalData.userInfo
            }
            wepy.getUserInfo({
                success: res => {
                    this.globalData.userInfo = res.userInfo
                    wepy.login({   //取code值 res.code
                        success: res => {
                            wx.request({     //用code值 取道 openid
                                url: `${this.api_host}/restapi/default/new-openid`,
                                data: {
                                    code: res.code,
                                    config_id: this.config_id
                                },
                                method: 'GET',
                                success: function (res) {
                                    let openid = res.data.data.openid
                                    if(!wx.getStorageSync('openid', openid)){

                                        wx.setStorageSync('openid', openid)
                                    }
                                }
                            })
                        }
                    })
                    cb && cb(res.userInfo)
                }
            })
        }


    }
</script>
